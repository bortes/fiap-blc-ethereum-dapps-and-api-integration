{"version":3,"sources":["assets/images/img_lp_acucar.jpg","assets/images/img_lp_milho.jpg","assets/images/img_lp_soja.jpg","components/Commodity.js","components/ListCommodities.js","scenes/App.js","services/ServiceWorker.js","reducers/WadaagReducer.js","stores/MainStore.js","index.js"],"names":["module","exports","Commodity","this","props","name","image","className","src","width","Component","connect","state","news","ListCommodities","commodities","code","SugarCard","id","CornCard","SoyCard","map","o","key","App","role","href","Boolean","window","location","hostname","match","NewsReducer","action","type","store","createStore","WadaagReducer","serialized","localStorage","getItem","JSON","parse","loadState","subscribe","throttle","stringify","setItem","saveState","getState","ReactDOM","render","MainStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,yC,+KCQrCC,E,uKAMQ,IAAD,EAIDC,KAAKC,MAFLC,EAFC,EAEDA,KACAC,EAHC,EAGDA,MAGJ,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,eACX,wBAAIA,UAAU,+BAAd,KAAgDF,EAAhD,MACA,yBAAKG,IAAMF,EAAQG,MAAM,c,GAhBrBC,aAmCTC,eANS,SAACC,GACrB,MAAO,CACHC,KAAMD,KAICD,CAAyBT,G,mDC7BlCY,E,4MACFF,MAAQ,CACJG,YAAa,CAAC,CACVC,KAAM,MACNX,KAAM,uBACNC,MAAOW,IACPC,GAAI,GACL,CACCF,KAAM,MACNX,KAAM,QACNC,MAAOa,IACPD,GAAI,GACL,CACCF,KAAM,MACNX,KAAM,OACNC,MAAOc,IACPF,GAAI,K,uDASF,IACEH,EAAgBZ,KAAKS,MAArBG,YAER,OACI,yBAAKR,UAAU,aACX,yBAAKA,UAAU,OAAf,IACQQ,EAAYM,KAAI,SAAAC,GAAC,OACd,kBAAC,EAAD,CAAWC,IAAKD,EAAEJ,GAAIb,KAAMiB,EAAEjB,KAAMC,MAAOgB,EAAEhB,WAFxD,U,GA9BcI,aAoDfC,eANS,SAACC,GACrB,MAAO,CACHC,KAAMD,KAICD,CAAyBG,GCpCzBU,E,uKAdP,OACI,0BAAMC,KAAK,QACP,yBAAKlB,UAAU,aACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAY,0BAAMA,UAAU,eAAhB,UAA1B,sBACA,+EAA2C,uBAAGA,UAAU,cAAcmB,KAAK,wBAAhC,SAA3C,MAA8G,uBAAGnB,UAAU,cAAcmB,KAAK,6BAAhC,aAA9G,OAGR,kBAAC,EAAD,W,GAfEhB,aCGEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCWSC,EAtBK,WAAyB,IAAxBpB,EAAuB,uDAAf,GAAIqB,EAAW,uCAkBhC,OAjBAA,EAAOC,KAiBAtB,GC8BbuB,EAAQC,YACVC,EAhCc,WACd,IACI,IAAMC,EAAaC,aAAaC,QAhBT,cAkBvB,GAAmB,OAAfF,EACA,OAAOG,KAAKC,MAAMJ,GACxB,WA2BFK,IAEJR,EAAMS,UAAUC,KAAS,kBAlBP,SAACjC,GACf,IACI,IAAM0B,EAAaG,KAAKK,UAAUlC,GAElC2B,aAAaQ,QAnCU,aAmCsBT,GAC/C,WAayBU,CAAUb,EAAMc,cA1CrB,MA4CXd,QCpDfe,IAASC,OACL,kBAAC,IAAD,CAAUhB,MAAOiB,GACb,kBAAC,EAAD,OAEJC,SAASC,eAAe,SHsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6efe4d27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img_lp_acucar.5751f741.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img_lp_milho.076db55a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img_lp_soja.12f96c43.jpg\";","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n/**\n * Componente responsavel por exibir as informacoes da mercadoria.\n *\n * @author bortes\n */\nclass Commodity extends Component {\n    /**\n     * Renderiza o componente.\n     *\n     * @author bortes\n     */\n    render() {\n        const {\n            name,\n            image,\n        } = this.props;\n\n        return (\n            <div className=\"col-md-4\">\n                <div className=\"text-center\">\n                    <h2 className=\"text-warning text-lowercase\">[ { name } ]</h2>\n                    <img src={ image } width=\"300\" />\n                </div>\n            </div>\n        );\n    }\n}\n\n\n/**\n * Mapeia o estado da aplicacao na propriedade \".props\" disponibilizadas dentro dos componentes.\n *\n * @author bortes\n */\nconst mapStateToProps = (state) => {\n    return {\n        news: state\n    }\n}\n\nexport default connect(mapStateToProps)(Commodity);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Commodity from './Commodity';\n\nimport SugarCard from '../assets/images/img_lp_acucar.jpg';\nimport CornCard from '../assets/images/img_lp_milho.jpg';\nimport SoyCard from '../assets/images/img_lp_soja.jpg';\n\n/**\n * Componente responsavel por listar as mercadorias disponiveis.\n *\n * @author bortes\n */\nclass ListCommodities extends Component {\n    state = {\n        commodities: [{\n            code: 'ACF',\n            name: 'Açúcar Cristal',\n            image: SugarCard,\n            id: 0, // igual ao numerado do smartcontract\n        }, {\n            code: 'CCM',\n            name: 'Milho',\n            image: CornCard,\n            id: 1, // igual ao numerado do smartcontract\n        }, {\n            code: 'SFI',\n            name: 'Soja',\n            image: SoyCard,\n            id: 2, // igual ao numerado do smartcontract\n        }]\n    };\n\n    /**\n     * Renderiza o componente.\n     *\n     * @author bortes\n     */\n    render() {\n        const { commodities } = this.state;\n\n        return (\n            <div className=\"container\">\n                <div className=\"row\"> {\n                        commodities.map(o => (\n                           <Commodity key={o.id} name={o.name} image={o.image} />\n                        ))\n                    } </div>\n            </div>\n        );\n    }\n}\n\n\n/**\n * Mapeia o estado da aplicacao na propriedade \".props\" disponibilizadas dentro dos componentes.\n *\n * @author bortes\n */\nconst mapStateToProps = (state) => {\n    return {\n        news: state\n    }\n}\n\nexport default connect(mapStateToProps)(ListCommodities);","import React, { Component } from 'react';\n\nimport ListCommodities from '../components/ListCommodities';\n\n/**\n * Componente responsavel por exibir a pagina principal.\n *\n * @author bortes\n */\nclass App extends Component {\n    /**\n     * Renderiza o componente.\n     *\n     * @author bortes\n     */\n    render() {\n        return (\n            <main role=\"main\">\n                <div className=\"jumbotron\">\n                    <div className=\"container\">\n                        <h1 className=\"display-3\"><span className=\"text-danger\">Olá</span>, seja bem vindo!!</h1>\n                        <p>Esta é uma página exemplo construída em <a className=\"text-danger\" href=\"https://reactjs.org/\">React</a> e <a className=\"text-danger\" href=\"https://getbootstrap.com/\">Bootstrap</a>.</p>\n                    </div>\n                </div>\n                <ListCommodities />\n            </main>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import * as NewsActions from '../actions/NewsActions';\n\n/**\n * Atualiza o estado da aplicacao em funcao das acoes solicitadas.\n *\n * @author bortes\n */\nconst NewsReducer = (state = [], action) => {\n    switch (action.type) {\n        // case NewsActions.CREATE_NEWS:\n        //     return [action.payload].concat(state);\n\n        // case NewsActions.READ_NEWS:\n        //     return state.map(o => o.when === action.payload.when ? { ...o, editing: false } : o);\n\n        // case NewsActions.UPDATE_NEWS:\n        //     return state.map(o =>  o.when === action.payload.when ? action.payload : o )\n\n        // case NewsActions.DELETE_NEWS:\n        //     return state.filter(o => o.when !== action.payload.when);\n\n        // case NewsActions.EDIT_NEWS:\n        //     return state.map(o => o.when === action.payload.when ? { ...o, editing: true } : o);\n\n        default:\n            return state;\n    }\n}\n\nexport default NewsReducer;","import throttle from 'lodash.throttle';\nimport { createStore } from 'redux';\n\nimport WadaagReducer from '../reducers/WadaagReducer';\n\n/**\n * Chave utilizada para persistir/recuperar os dados salvos no localStorage.\n *\n * @author bortes\n */\nconst LOCAL_STORAGE_KEY_NAME = 'main_store';\n\n/**\n * Tempo de espera em milisegundos entre cada solicitacao para salvar os dados.\n *\n * @author bortes\n */\nconst TIME_BETWEEN_SAVE = 1000;\n\n/**\n * Recupera os dados salvo no localStorage.\n *\n * @author bortes\n */\nconst loadState = () => {\n    try {\n        const serialized = localStorage.getItem(LOCAL_STORAGE_KEY_NAME);\n\n        if (serialized !== null)\n            return JSON.parse(serialized);\n    } catch {\n    }\n\n    return undefined;\n};\n\n/**\n * Salva os dados no localStorage.\n *\n * @author bortes\n */\nconst saveState = (state) => {\n    try {\n        const serialized = JSON.stringify(state);\n\n        localStorage.setItem(LOCAL_STORAGE_KEY_NAME, serialized);\n    } catch {\n    }\n};\n\n/**\n * Cria store que sera utilizado pela aplicacao e tambem ja registra tratamento nao permitir salvar os dados a toda hora.\n *\n * @author bortes\n */\nconst store = createStore(\n    WadaagReducer,\n    loadState()\n);\nstore.subscribe(throttle(() => saveState(store.getState()), TIME_BETWEEN_SAVE));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './assets/themes/bootswatch/slate/bootstrap.css';\nimport App from './scenes/App';\nimport * as ServiceWorker from './services/ServiceWorker';\nimport MainStore from './stores/MainStore';\n\nReactDOM.render(\n    <Provider store={MainStore}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nServiceWorker.unregister();\n"],"sourceRoot":""}